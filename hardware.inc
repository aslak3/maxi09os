; ascii constants

		.include "system.inc"

; 16C654 QUART

BASE16C654	.equ 0x8000

; regsiters within one port

RHR16C654	.equ 0
THR16C654	.equ 0
IER16C654	.equ 1
ISR16C654	.equ 2
FCR16C654	.equ 2
LCR16C654	.equ 3
MCR16C654	.equ 4
LSR16C654	.equ 5
MSR16C654	.equ 6
SPR16C654	.equ 7
DLL16C654	.equ 0
DLM16C654	.equ 1
EFR16C654	.equ 2
XON116C654	.equ 4
XON216C654	.equ 5
XOFF116C654	.equ 6
XOFF216C654	.equ 7

; the base address of each port

BASEPA16C654	.equ BASE16C654+0
BASEPB16C654	.equ BASE16C654+8
BASEPC16C654	.equ BASE16C654+16
BASEPD16C654	.equ BASE16C654+24

; symbolic port names

PORTA		.equ 0
PORTB		.equ 1
PORTC		.equ 2
PORTD		.equ 3

; baud rates - DLL value, DLM is 0

B9600		.equ 0x0c
B19200		.equ 0x06
B38400		.equ 0x03
B57600		.equ 0x02
B115200		.equ 0x01

; 6522

BASE6522	.equ 0x8100
PORTB6522	.equ BASE6522+0x0
PORTA6522	.equ BASE6522+0x1
DDRB6522	.equ BASE6522+0x2
DDRA6522	.equ BASE6522+0x3
T1CL6522	.equ BASE6522+0x4
T1CH6522	.equ BASE6522+0x5
T1LL6522	.equ BASE6522+0x6
T1LH6522	.equ BASE6522+0x7
T2LL6522	.equ BASE6522+0x8
T2CL6522	.equ BASE6522+0x8
T2CH6522	.equ BASE6522+0x9
SR6522		.equ BASE6522+0xa
ACR6522		.equ BASE6522+0xb
PCR6522		.equ BASE6522+0xc
IFR6522		.equ BASE6522+0xd
IER6522		.equ BASE6522+0xe
ORAX6522	.equ BASE6522+0xf

; joysticks

JOYPORT0	.equ 0x8200
JOYPORT1	.equ 0x8300

; joystick masks

JOYUP		.equ 0x01
JOYDOWN		.equ 0x02
JOYLEFT		.equ 0x04
JOYRIGHT	.equ 0x08
JOYFIRE1	.equ 0x10

; OPL2

OPLBASE		.equ 0x8400

OPLADDRESS	.equ OPLBASE+0
OPLDATA		.equ OPLBASE+1

; v9958

VBASE		.equ 0x8500
VPORT0		.equ VBASE
VPORT1		.equ VBASE+1
VPORT2		.equ VBASE+2
VPORT3		.equ VBASE+3

VDIRECTPORT	.equ VPORT1

VSTATUSREG	.equ 15
VSTATUSPORT	.equ VPORT1
VPALETTEREG	.equ 16
VPALETTEPORT	.equ VPORT2
VINDIRECTREG	.equ 17
VINDIRECTPORT	.equ VPORT3
VADDRREG	.equ 14
VADDRPORT	.equ VPORT1

VBANKREG	.equ 45
VMODE0REG	.equ 0
VMODE1REG	.equ 1
VMODE2REG	.equ 8
VMODE3REG	.equ 9
VVIDBASEREG	.equ 2
VCOLBASELREG	.equ 3
VCOLBASEHREG	.equ 10
VPATTBASEREG	.equ 4
VSPRBASELREG	.equ 5
VSPRBASEHREG	.equ 11
VSPRGBASEREG	.equ 6
VCOLOUR1REG	.equ 7
VCOLOUR2REG	.equ 12
VBLINKREG	.equ 13
VCOLBURST1REG	.equ 20
VCOLBURST2REG	.equ 21
VCOLBURST3REG	.equ 22
VDISPLAYPOSREG	.equ 18
VDISPLAYOFFREG	.equ 23
VINTLINEREG	.equ 19
VSRCXLREG	.equ 32
VSRCXHREG	.equ 33
VSRCYLREG	.equ 34
VSRCYHREG	.equ 35
VDSTXLREG	.equ 36
VDSTXHREG	.equ 37
VDSTYLREG	.equ 38
VDSTYHREG	.equ 39
VDOTSXLREG	.equ 40
VDOTSXHREG	.equ 41
VDOTSYLREG	.equ 42
VDOTSYHREG	.equ 43
VCOMCOLOURREG	.equ 44
VCOMARGREG	.equ 45
VCOMCOMMANDREG	.equ 46

; DISCo

DISCOBASE	.equ 0x8e00

; general

LED		.equ DISCOBASE+0x00
BUZZER		.equ DISCOBASE+0x01
RESETTRIGGER	.equ DISCOBASE+0x02

; spi

SPISELECTS	.equ DISCOBASE+0x03
SPIOUT		.equ DISCOBASE+0x04
SPIIN		.equ DISCOBASE+0x04

SDO		.equ 0x01
SCLK		.equ 0x02

SIN		.equ 0x01

; irq routing

NMISOURCESR	.equ DISCOBASE+0x10
NMISOURCESS	.equ DISCOBASE+0x11
IRQSOURCESR	.equ DISCOBASE+0x12
IRQSOURCESS	.equ DISCOBASE+0x13
FIRQSOURCESR	.equ DISCOBASE+0x14
FIRQSOURCESS	.equ DISCOBASE+0x15

; current irq state

ACTIVENMI	.equ NMISOURCESR
ACTIVEIRQ	.equ IRQSOURCESR
ACTIVEFIRQ	.equ FIRQSOURCESR

; irq bit masks

INTMASKKBDREQ	.equ 0x01
INTMASKOPL	.equ 0x02
INTMASK6522	.equ 0x04
INTMASKRTC	.equ 0x08
INTMASKUART	.equ 0x10
INTMASKIDE	.equ 0x20
INTMASKVDC	.equ 0x40
INTMASKMUDDY	.equ 0x80

; and irq bit numbers

INTBITKBDREQ	.equ 0
INTBITOPL	.equ 1
INTBIT6522	.equ 2
INTBITRTC	.equ 3
INTBITUART	.equ 4
INTBITIDE	.equ 5
INTBITVDC	.equ 6
INTBITMUDDY	.equ 7
INTCOUNT	.equ 8 ; used to size per-int tables

; ide

IDEBASE		.equ DISCOBASE+0x20
IDEDATA		.equ IDEBASE+0x0
IDEERR		.equ IDEBASE+0x1
IDEFEATURES	.equ IDEBASE+0x1
IDECOUNT	.equ IDEBASE+0x2
IDELBA0		.equ IDEBASE+0x3
IDELBA1		.equ IDEBASE+0x4
IDELBA2		.equ IDEBASE+0x5
IDELBA3		.equ IDEBASE+0x6
IDEHEADS	.equ IDEBASE+0x6
IDESTATUS	.equ IDEBASE+0x7
IDECOMMAND	.equ IDEBASE+0x7

; MuDdy

MUDDYBASE	.equ 0x8f00

DMABASE		.equ MUDDYBASE
DMASRC		.equ DMABASE+0
DMADST		.equ DMABASE+2
DMALENGTH	.equ DMABASE+4
DMAFLAGS	.equ DMABASE+6

MUDDYSTATE	.equ MUDDYBASE+7

; memory

HIRAMSTART	.equ 0x4000
HIRAMEND	.equ 0x7fff
RAMSTART	.equ 0x0000
RAMEND		.equ 0x7fff
ROMSTART	.equ 0xc000
ROMEND		.equ 0xffff
ROMCOPYSTART	.equ 0x4000
ROMCOPYEND	.equ 0x7fff
LOADERSTART	.equ 0xff00
LOADEREND	.equ 0xffff
LOADERCOPYSTART	.equ 0x4000
LOADERCOPYEND	.equ 0x40ff

STACKEND	.equ 0x1fff
USERSTACKEND	.equ 0x2800

PCOFFSET	.equ 10

; macros for twiddling with condition code

.macro		enableinterrupts
		andcc #0xaf
.endm
.macro		disableinterrupts
		orcc #0x50
.endm

.macro		setnotzero
		andcc #0xfb
.endm
.macro		setzero
		orcc #0x04
.endm

.macro		setnotcarry
		andcc #0xfe
.endm

.macro		setcarry
		orcc #0x01
.endm